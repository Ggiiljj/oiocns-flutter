// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:MessageGroup.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// MessageGroup TABLE
class TableMessageGroup extends SqfEntityTableBase {
  TableMessageGroup() {
    // declare properties of EntityTable
    tableName = 'messageGroup';
    primaryKeyName = 'seqId';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('code', DbType.text),
      SqfEntityFieldBase('typeName', DbType.text),
      SqfEntityFieldBase('thingId', DbType.integer),
      SqfEntityFieldBase('status', DbType.integer),
      SqfEntityFieldBase('createUser', DbType.integer),
      SqfEntityFieldBase('updateUser', DbType.integer),
      SqfEntityFieldBase('version', DbType.integer),
      SqfEntityFieldBase('createTime', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updateTime', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('priority', DbType.integer),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMessageGroup();
  }
}

// MessageDetail TABLE
class TableMessageDetail extends SqfEntityTableBase {
  TableMessageDetail() {
    // declare properties of EntityTable
    tableName = 'messageDetail';
    primaryKeyName = 'seqId';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer),
      SqfEntityFieldBase('fromId', DbType.integer, isIndex: true),
      SqfEntityFieldBase('toId', DbType.integer),
      SqfEntityFieldBase('msgType', DbType.text),
      SqfEntityFieldBase('msgBody', DbType.text),
      SqfEntityFieldBase('status', DbType.integer),
      SqfEntityFieldBase('createUser', DbType.integer),
      SqfEntityFieldBase('updateUser', DbType.integer),
      SqfEntityFieldBase('version', DbType.integer),
      SqfEntityFieldBase('createTime', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updateTime', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('isRead', DbType.bool),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMessageDetail();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class Orginone extends SqfEntityModelProvider {
  Orginone() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    preSaveAction = dbModel.preSaveAction;
    logFunction = dbModel.logFunction;
    databaseTables = [
      TableMessageGroup.getInstance,
      TableMessageDetail.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = dbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region MessageGroup
class MessageGroup extends TableBase {
  MessageGroup(
      {this.seqId,
      this.id,
      this.name,
      this.code,
      this.typeName,
      this.thingId,
      this.status,
      this.createUser,
      this.updateUser,
      this.version,
      this.createTime,
      this.updateTime,
      this.priority}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  MessageGroup.withFields(
      this.id,
      this.name,
      this.code,
      this.typeName,
      this.thingId,
      this.status,
      this.createUser,
      this.updateUser,
      this.version,
      this.createTime,
      this.updateTime,
      this.priority) {
    _setDefaultValues();
  }
  MessageGroup.withId(
      this.seqId,
      this.id,
      this.name,
      this.code,
      this.typeName,
      this.thingId,
      this.status,
      this.createUser,
      this.updateUser,
      this.version,
      this.createTime,
      this.updateTime,
      this.priority) {
    _setDefaultValues();
  }
  // fromMap v2.0
  MessageGroup.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    seqId = int.tryParse(o['seqId'].toString());
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['code'] != null) {
      code = o['code'].toString();
    }
    if (o['typeName'] != null) {
      typeName = o['typeName'].toString();
    }
    if (o['thingId'] != null) {
      thingId = int.tryParse(o['thingId'].toString());
    }
    if (o['status'] != null) {
      status = int.tryParse(o['status'].toString());
    }
    if (o['createUser'] != null) {
      createUser = int.tryParse(o['createUser'].toString());
    }
    if (o['updateUser'] != null) {
      updateUser = int.tryParse(o['updateUser'].toString());
    }
    if (o['version'] != null) {
      version = int.tryParse(o['version'].toString());
    }
    if (o['createTime'] != null) {
      createTime = int.tryParse(o['createTime'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createTime'].toString())!)
          : DateTime.tryParse(o['createTime'].toString());
    }
    if (o['updateTime'] != null) {
      updateTime = int.tryParse(o['updateTime'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updateTime'].toString())!)
          : DateTime.tryParse(o['updateTime'].toString());
    }
    if (o['priority'] != null) {
      priority = int.tryParse(o['priority'].toString());
    }
  }
  // FIELDS (MessageGroup)
  int? seqId;
  int? id;
  String? name;
  String? code;
  String? typeName;
  int? thingId;
  int? status;
  int? createUser;
  int? updateUser;
  int? version;
  DateTime? createTime;
  DateTime? updateTime;
  int? priority;

  // end FIELDS (MessageGroup)

  static const bool _softDeleteActivated = false;
  MessageGroupManager? __mnMessageGroup;

  MessageGroupManager get _mnMessageGroup {
    return __mnMessageGroup = __mnMessageGroup ?? MessageGroupManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['seqId'] = seqId;
    if (id != null || !forView) {
      map['id'] = id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (code != null || !forView) {
      map['code'] = code;
    }
    if (typeName != null || !forView) {
      map['typeName'] = typeName;
    }
    if (thingId != null || !forView) {
      map['thingId'] = thingId;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (createUser != null || !forView) {
      map['createUser'] = createUser;
    }
    if (updateUser != null || !forView) {
      map['updateUser'] = updateUser;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }
    if (createTime != null) {
      map['createTime'] = forJson
          ? createTime!.toString()
          : forQuery
              ? createTime!.millisecondsSinceEpoch
              : createTime;
    } else if (createTime != null || !forView) {
      map['createTime'] = null;
    }
    if (updateTime != null) {
      map['updateTime'] = forJson
          ? updateTime!.toString()
          : forQuery
              ? updateTime!.millisecondsSinceEpoch
              : updateTime;
    } else if (updateTime != null || !forView) {
      map['updateTime'] = null;
    }
    if (priority != null || !forView) {
      map['priority'] = priority;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['seqId'] = seqId;
    if (id != null || !forView) {
      map['id'] = id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (code != null || !forView) {
      map['code'] = code;
    }
    if (typeName != null || !forView) {
      map['typeName'] = typeName;
    }
    if (thingId != null || !forView) {
      map['thingId'] = thingId;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (createUser != null || !forView) {
      map['createUser'] = createUser;
    }
    if (updateUser != null || !forView) {
      map['updateUser'] = updateUser;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }
    if (createTime != null) {
      map['createTime'] = forJson
          ? createTime!.toString()
          : forQuery
              ? createTime!.millisecondsSinceEpoch
              : createTime;
    } else if (createTime != null || !forView) {
      map['createTime'] = null;
    }
    if (updateTime != null) {
      map['updateTime'] = forJson
          ? updateTime!.toString()
          : forQuery
              ? updateTime!.millisecondsSinceEpoch
              : updateTime;
    } else if (updateTime != null || !forView) {
      map['updateTime'] = null;
    }
    if (priority != null || !forView) {
      map['priority'] = priority;
    }

    return map;
  }

  /// This method returns Json String [MessageGroup]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [MessageGroup]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      id,
      name,
      code,
      typeName,
      thingId,
      status,
      createUser,
      updateUser,
      version,
      createTime != null ? createTime!.millisecondsSinceEpoch : null,
      updateTime != null ? updateTime!.millisecondsSinceEpoch : null,
      priority
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      seqId,
      id,
      name,
      code,
      typeName,
      thingId,
      status,
      createUser,
      updateUser,
      version,
      createTime != null ? createTime!.millisecondsSinceEpoch : null,
      updateTime != null ? updateTime!.millisecondsSinceEpoch : null,
      priority
    ];
  }

  static Future<List<MessageGroup>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MessageGroup.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<MessageGroup>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <MessageGroup>[];
    try {
      objList = list
          .map((messagegroup) =>
              MessageGroup.fromMap(messagegroup as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MessageGroup.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<MessageGroup>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<MessageGroup> objList = <MessageGroup>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = MessageGroup.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns MessageGroup by ID if exist, otherwise returns null
  /// Primary Keys: int? seqId
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [MessageGroup] if exist, otherwise returns null
  Future<MessageGroup?> getById(int? seqId,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (seqId == null) {
      return null;
    }
    MessageGroup? obj;
    final data = await _mnMessageGroup.getById([seqId]);
    if (data.length != 0) {
      obj = MessageGroup.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (MessageGroup) object. If the seqId field is null, saves as a new record and returns new seqId, if seqId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns seqId
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (seqId == null || seqId == 0) {
      seqId = await _mnMessageGroup.insert(this, ignoreBatch);
    } else {
      await _mnMessageGroup.update(this);
    }

    return seqId;
  }

  /// Saves the (MessageGroup) object. If the seqId field is null, saves as a new record and returns new seqId, if seqId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns seqId
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (seqId == null || seqId == 0) {
      seqId = await _mnMessageGroup.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // seqId= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMessageGroup.updateOrThrow(this);
    }

    return seqId;
  }

  /// saveAs MessageGroup. Returns a new Primary Key value of MessageGroup

  /// <returns>Returns a new Primary Key value of MessageGroup
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    seqId = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<MessageGroup> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<MessageGroup> messagegroups,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Orginone().batchStart();
    for (final obj in messagegroups) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Orginone().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < messagegroups.length; i++) {
        if (messagegroups[i].seqId == null) {
          messagegroups[i].seqId = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns seqId
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnMessageGroup.rawInsert(
          'INSERT OR REPLACE INTO messageGroup (seqId, id, name, code, typeName, thingId, status, createUser, updateUser, version, createTime, updateTime, priority)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            seqId,
            id,
            name,
            code,
            typeName,
            thingId,
            status,
            createUser,
            updateUser,
            version,
            createTime != null ? createTime!.millisecondsSinceEpoch : null,
            updateTime != null ? updateTime!.millisecondsSinceEpoch : null,
            priority
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'MessageGroup seqId=$seqId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'MessageGroup seqId=$seqId did not update');
      }
      return seqId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'MessageGroup Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<MessageGroup>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<MessageGroup> messagegroups,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnMessageGroup.rawInsertAll(
        'INSERT OR REPLACE INTO messageGroup (seqId, id, name, code, typeName, thingId, status, createUser, updateUser, version, createTime, updateTime, priority)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
        messagegroups,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes MessageGroup

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete MessageGroup invoked (seqId=$seqId)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnMessageGroup
          .delete(QueryParams(whereString: 'seqId=?', whereArguments: [seqId]));
    } else {
      return _mnMessageGroup.updateBatch(
          QueryParams(whereString: 'seqId=?', whereArguments: [seqId]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [MessageGroup] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  MessageGroupFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MessageGroupFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  MessageGroupFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MessageGroupFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      seqId = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion messagegroup

// region MessageGroupField
class MessageGroupField extends FilterBase {
  MessageGroupField(MessageGroupFilterBuilder messagegroupFB)
      : super(messagegroupFB);

  @override
  MessageGroupFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder isNull() {
    return super.isNull() as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as MessageGroupFilterBuilder;
  }

  @override
  MessageGroupField get not {
    return super.not as MessageGroupField;
  }
}
// endregion MessageGroupField

// region MessageGroupFilterBuilder
class MessageGroupFilterBuilder extends ConjunctionBase {
  MessageGroupFilterBuilder(MessageGroup obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnMessageGroup = obj._mnMessageGroup;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  MessageGroupManager? _mnMessageGroup;

  /// put the sql keyword 'AND'
  @override
  MessageGroupFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  MessageGroupFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  MessageGroupFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  MessageGroupFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  MessageGroupFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  MessageGroupFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  MessageGroupFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MessageGroupFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MessageGroupFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MessageGroupFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MessageGroupFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  MessageGroupField _setField(
      MessageGroupField? field, String colName, DbType dbtype) {
    return MessageGroupField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  MessageGroupField? _seqId;
  MessageGroupField get seqId {
    return _seqId = _setField(_seqId, 'seqId', DbType.integer);
  }

  MessageGroupField? _id;
  MessageGroupField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  MessageGroupField? _name;
  MessageGroupField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  MessageGroupField? _code;
  MessageGroupField get code {
    return _code = _setField(_code, 'code', DbType.text);
  }

  MessageGroupField? _typeName;
  MessageGroupField get typeName {
    return _typeName = _setField(_typeName, 'typeName', DbType.text);
  }

  MessageGroupField? _thingId;
  MessageGroupField get thingId {
    return _thingId = _setField(_thingId, 'thingId', DbType.integer);
  }

  MessageGroupField? _status;
  MessageGroupField get status {
    return _status = _setField(_status, 'status', DbType.integer);
  }

  MessageGroupField? _createUser;
  MessageGroupField get createUser {
    return _createUser = _setField(_createUser, 'createUser', DbType.integer);
  }

  MessageGroupField? _updateUser;
  MessageGroupField get updateUser {
    return _updateUser = _setField(_updateUser, 'updateUser', DbType.integer);
  }

  MessageGroupField? _version;
  MessageGroupField get version {
    return _version = _setField(_version, 'version', DbType.integer);
  }

  MessageGroupField? _createTime;
  MessageGroupField get createTime {
    return _createTime = _setField(_createTime, 'createTime', DbType.datetime);
  }

  MessageGroupField? _updateTime;
  MessageGroupField get updateTime {
    return _updateTime = _setField(_updateTime, 'updateTime', DbType.datetime);
  }

  MessageGroupField? _priority;
  MessageGroupField get priority {
    return _priority = _setField(_priority, 'priority', DbType.integer);
  }

  /// Deletes List<MessageGroup> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnMessageGroup!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnMessageGroup!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'seqId IN (SELECT seqId from messageGroup ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnMessageGroup!.updateBatch(qparams, values);
  }

  /// This method always returns [MessageGroup] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MessageGroup?
  @override
  Future<MessageGroup?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnMessageGroup!.toList(qparams);
    final data = await objFuture;
    MessageGroup? obj;
    if (data.isNotEmpty) {
      obj = MessageGroup.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [MessageGroup]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MessageGroup?
  @override
  Future<MessageGroup> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        MessageGroup();
  }

  /// This method returns int. [MessageGroup]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? messagegroupCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final messagegroupsFuture = await _mnMessageGroup!.toList(qparams);
    final int count = messagegroupsFuture[0]['CNT'] as int;
    if (messagegroupCount != null) {
      messagegroupCount(count);
    }
    return count;
  }

  /// This method returns List<MessageGroup> [MessageGroup]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<MessageGroup>
  @override
  Future<List<MessageGroup>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<MessageGroup> messagegroupsData = await MessageGroup.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return messagegroupsData;
  }

  /// This method returns Json String [MessageGroup]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [MessageGroup]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [MessageGroup]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnMessageGroup!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [MessageGroup]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `seqId` FROM messageGroup WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> seqIdData = <int>[];
    qparams.selectColumns = ['seqId'];
    final seqIdFuture = await _mnMessageGroup!.toList(qparams);

    final int count = seqIdFuture.length;
    for (int i = 0; i < count; i++) {
      seqIdData.add(seqIdFuture[i]['seqId'] as int);
    }
    return seqIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [MessageGroup]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnMessageGroup!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await MessageGroup.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnMessageGroup!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MessageGroupFilterBuilder

// region MessageGroupFields
class MessageGroupFields {
  static TableField? _fSeqId;
  static TableField get seqId {
    return _fSeqId =
        _fSeqId ?? SqlSyntax.setField(_fSeqId, 'seqid', DbType.integer);
  }

  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fCode;
  static TableField get code {
    return _fCode = _fCode ?? SqlSyntax.setField(_fCode, 'code', DbType.text);
  }

  static TableField? _fTypeName;
  static TableField get typeName {
    return _fTypeName =
        _fTypeName ?? SqlSyntax.setField(_fTypeName, 'typeName', DbType.text);
  }

  static TableField? _fThingId;
  static TableField get thingId {
    return _fThingId =
        _fThingId ?? SqlSyntax.setField(_fThingId, 'thingId', DbType.integer);
  }

  static TableField? _fStatus;
  static TableField get status {
    return _fStatus =
        _fStatus ?? SqlSyntax.setField(_fStatus, 'status', DbType.integer);
  }

  static TableField? _fCreateUser;
  static TableField get createUser {
    return _fCreateUser = _fCreateUser ??
        SqlSyntax.setField(_fCreateUser, 'createUser', DbType.integer);
  }

  static TableField? _fUpdateUser;
  static TableField get updateUser {
    return _fUpdateUser = _fUpdateUser ??
        SqlSyntax.setField(_fUpdateUser, 'updateUser', DbType.integer);
  }

  static TableField? _fVersion;
  static TableField get version {
    return _fVersion =
        _fVersion ?? SqlSyntax.setField(_fVersion, 'version', DbType.integer);
  }

  static TableField? _fCreateTime;
  static TableField get createTime {
    return _fCreateTime = _fCreateTime ??
        SqlSyntax.setField(_fCreateTime, 'createTime', DbType.datetime);
  }

  static TableField? _fUpdateTime;
  static TableField get updateTime {
    return _fUpdateTime = _fUpdateTime ??
        SqlSyntax.setField(_fUpdateTime, 'updateTime', DbType.datetime);
  }

  static TableField? _fPriority;
  static TableField get priority {
    return _fPriority = _fPriority ??
        SqlSyntax.setField(_fPriority, 'priority', DbType.integer);
  }
}
// endregion MessageGroupFields

//region MessageGroupManager
class MessageGroupManager extends SqfEntityProvider {
  MessageGroupManager()
      : super(Orginone(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'messageGroup';
  static const List<String> _primaryKeyList = ['seqId'];
  static const String _whereStr = 'seqId=?';
}

//endregion MessageGroupManager
// region MessageDetail
class MessageDetail extends TableBase {
  MessageDetail(
      {this.seqId,
      this.id,
      this.fromId,
      this.toId,
      this.msgType,
      this.msgBody,
      this.status,
      this.createUser,
      this.updateUser,
      this.version,
      this.createTime,
      this.updateTime,
      this.isRead}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  MessageDetail.withFields(
      this.id,
      this.fromId,
      this.toId,
      this.msgType,
      this.msgBody,
      this.status,
      this.createUser,
      this.updateUser,
      this.version,
      this.createTime,
      this.updateTime,
      this.isRead) {
    _setDefaultValues();
  }
  MessageDetail.withId(
      this.seqId,
      this.id,
      this.fromId,
      this.toId,
      this.msgType,
      this.msgBody,
      this.status,
      this.createUser,
      this.updateUser,
      this.version,
      this.createTime,
      this.updateTime,
      this.isRead) {
    _setDefaultValues();
  }
  // fromMap v2.0
  MessageDetail.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    seqId = int.tryParse(o['seqId'].toString());
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['fromId'] != null) {
      fromId = int.tryParse(o['fromId'].toString());
    }
    if (o['toId'] != null) {
      toId = int.tryParse(o['toId'].toString());
    }
    if (o['msgType'] != null) {
      msgType = o['msgType'].toString();
    }
    if (o['msgBody'] != null) {
      msgBody = o['msgBody'].toString();
    }
    if (o['status'] != null) {
      status = int.tryParse(o['status'].toString());
    }
    if (o['createUser'] != null) {
      createUser = int.tryParse(o['createUser'].toString());
    }
    if (o['updateUser'] != null) {
      updateUser = int.tryParse(o['updateUser'].toString());
    }
    if (o['version'] != null) {
      version = int.tryParse(o['version'].toString());
    }
    if (o['createTime'] != null) {
      createTime = int.tryParse(o['createTime'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createTime'].toString())!)
          : DateTime.tryParse(o['createTime'].toString());
    }
    if (o['updateTime'] != null) {
      updateTime = int.tryParse(o['updateTime'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updateTime'].toString())!)
          : DateTime.tryParse(o['updateTime'].toString());
    }
    if (o['isRead'] != null) {
      isRead =
          o['isRead'].toString() == '1' || o['isRead'].toString() == 'true';
    }
  }
  // FIELDS (MessageDetail)
  int? seqId;
  int? id;
  int? fromId;
  int? toId;
  String? msgType;
  String? msgBody;
  int? status;
  int? createUser;
  int? updateUser;
  int? version;
  DateTime? createTime;
  DateTime? updateTime;
  bool? isRead;

  // end FIELDS (MessageDetail)

  static const bool _softDeleteActivated = false;
  MessageDetailManager? __mnMessageDetail;

  MessageDetailManager get _mnMessageDetail {
    return __mnMessageDetail = __mnMessageDetail ?? MessageDetailManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['seqId'] = seqId;
    if (id != null || !forView) {
      map['id'] = id;
    }
    if (fromId != null || !forView) {
      map['fromId'] = fromId;
    }
    if (toId != null || !forView) {
      map['toId'] = toId;
    }
    if (msgType != null || !forView) {
      map['msgType'] = msgType;
    }
    if (msgBody != null || !forView) {
      map['msgBody'] = msgBody;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (createUser != null || !forView) {
      map['createUser'] = createUser;
    }
    if (updateUser != null || !forView) {
      map['updateUser'] = updateUser;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }
    if (createTime != null) {
      map['createTime'] = forJson
          ? createTime!.toString()
          : forQuery
              ? createTime!.millisecondsSinceEpoch
              : createTime;
    } else if (createTime != null || !forView) {
      map['createTime'] = null;
    }
    if (updateTime != null) {
      map['updateTime'] = forJson
          ? updateTime!.toString()
          : forQuery
              ? updateTime!.millisecondsSinceEpoch
              : updateTime;
    } else if (updateTime != null || !forView) {
      map['updateTime'] = null;
    }
    if (isRead != null) {
      map['isRead'] = forQuery ? (isRead! ? 1 : 0) : isRead;
    } else if (isRead != null || !forView) {
      map['isRead'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['seqId'] = seqId;
    if (id != null || !forView) {
      map['id'] = id;
    }
    if (fromId != null || !forView) {
      map['fromId'] = fromId;
    }
    if (toId != null || !forView) {
      map['toId'] = toId;
    }
    if (msgType != null || !forView) {
      map['msgType'] = msgType;
    }
    if (msgBody != null || !forView) {
      map['msgBody'] = msgBody;
    }
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (createUser != null || !forView) {
      map['createUser'] = createUser;
    }
    if (updateUser != null || !forView) {
      map['updateUser'] = updateUser;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }
    if (createTime != null) {
      map['createTime'] = forJson
          ? createTime!.toString()
          : forQuery
              ? createTime!.millisecondsSinceEpoch
              : createTime;
    } else if (createTime != null || !forView) {
      map['createTime'] = null;
    }
    if (updateTime != null) {
      map['updateTime'] = forJson
          ? updateTime!.toString()
          : forQuery
              ? updateTime!.millisecondsSinceEpoch
              : updateTime;
    } else if (updateTime != null || !forView) {
      map['updateTime'] = null;
    }
    if (isRead != null) {
      map['isRead'] = forQuery ? (isRead! ? 1 : 0) : isRead;
    } else if (isRead != null || !forView) {
      map['isRead'] = null;
    }

    return map;
  }

  /// This method returns Json String [MessageDetail]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [MessageDetail]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      id,
      fromId,
      toId,
      msgType,
      msgBody,
      status,
      createUser,
      updateUser,
      version,
      createTime != null ? createTime!.millisecondsSinceEpoch : null,
      updateTime != null ? updateTime!.millisecondsSinceEpoch : null,
      isRead
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      seqId,
      id,
      fromId,
      toId,
      msgType,
      msgBody,
      status,
      createUser,
      updateUser,
      version,
      createTime != null ? createTime!.millisecondsSinceEpoch : null,
      updateTime != null ? updateTime!.millisecondsSinceEpoch : null,
      isRead
    ];
  }

  static Future<List<MessageDetail>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MessageDetail.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<MessageDetail>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <MessageDetail>[];
    try {
      objList = list
          .map((messagedetail) =>
              MessageDetail.fromMap(messagedetail as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MessageDetail.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<MessageDetail>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<MessageDetail> objList = <MessageDetail>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = MessageDetail.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns MessageDetail by ID if exist, otherwise returns null
  /// Primary Keys: int? seqId
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [MessageDetail] if exist, otherwise returns null
  Future<MessageDetail?> getById(int? seqId,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (seqId == null) {
      return null;
    }
    MessageDetail? obj;
    final data = await _mnMessageDetail.getById([seqId]);
    if (data.length != 0) {
      obj = MessageDetail.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (MessageDetail) object. If the seqId field is null, saves as a new record and returns new seqId, if seqId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns seqId
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (seqId == null || seqId == 0) {
      seqId = await _mnMessageDetail.insert(this, ignoreBatch);
    } else {
      await _mnMessageDetail.update(this);
    }

    return seqId;
  }

  /// Saves the (MessageDetail) object. If the seqId field is null, saves as a new record and returns new seqId, if seqId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns seqId
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (seqId == null || seqId == 0) {
      seqId = await _mnMessageDetail.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // seqId= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMessageDetail.updateOrThrow(this);
    }

    return seqId;
  }

  /// saveAs MessageDetail. Returns a new Primary Key value of MessageDetail

  /// <returns>Returns a new Primary Key value of MessageDetail
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    seqId = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<MessageDetail> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<MessageDetail> messagedetails,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Orginone().batchStart();
    for (final obj in messagedetails) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Orginone().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < messagedetails.length; i++) {
        if (messagedetails[i].seqId == null) {
          messagedetails[i].seqId = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns seqId
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnMessageDetail.rawInsert(
          'INSERT OR REPLACE INTO messageDetail (seqId, id, fromId, toId, msgType, msgBody, status, createUser, updateUser, version, createTime, updateTime, isRead)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            seqId,
            id,
            fromId,
            toId,
            msgType,
            msgBody,
            status,
            createUser,
            updateUser,
            version,
            createTime != null ? createTime!.millisecondsSinceEpoch : null,
            updateTime != null ? updateTime!.millisecondsSinceEpoch : null,
            isRead
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'MessageDetail seqId=$seqId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'MessageDetail seqId=$seqId did not update');
      }
      return seqId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'MessageDetail Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<MessageDetail>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<MessageDetail> messagedetails,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnMessageDetail.rawInsertAll(
        'INSERT OR REPLACE INTO messageDetail (seqId, id, fromId, toId, msgType, msgBody, status, createUser, updateUser, version, createTime, updateTime, isRead)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
        messagedetails,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes MessageDetail

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete MessageDetail invoked (seqId=$seqId)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnMessageDetail
          .delete(QueryParams(whereString: 'seqId=?', whereArguments: [seqId]));
    } else {
      return _mnMessageDetail.updateBatch(
          QueryParams(whereString: 'seqId=?', whereArguments: [seqId]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [MessageDetail] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  MessageDetailFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MessageDetailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  MessageDetailFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MessageDetailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      seqId = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion messagedetail

// region MessageDetailField
class MessageDetailField extends FilterBase {
  MessageDetailField(MessageDetailFilterBuilder messagedetailFB)
      : super(messagedetailFB);

  @override
  MessageDetailFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder isNull() {
    return super.isNull() as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as MessageDetailFilterBuilder;
  }

  @override
  MessageDetailField get not {
    return super.not as MessageDetailField;
  }
}
// endregion MessageDetailField

// region MessageDetailFilterBuilder
class MessageDetailFilterBuilder extends ConjunctionBase {
  MessageDetailFilterBuilder(MessageDetail obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnMessageDetail = obj._mnMessageDetail;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  MessageDetailManager? _mnMessageDetail;

  /// put the sql keyword 'AND'
  @override
  MessageDetailFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  MessageDetailFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  MessageDetailFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  MessageDetailFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  MessageDetailFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  MessageDetailFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  MessageDetailFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MessageDetailFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MessageDetailFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MessageDetailFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MessageDetailFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  MessageDetailField _setField(
      MessageDetailField? field, String colName, DbType dbtype) {
    return MessageDetailField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  MessageDetailField? _seqId;
  MessageDetailField get seqId {
    return _seqId = _setField(_seqId, 'seqId', DbType.integer);
  }

  MessageDetailField? _id;
  MessageDetailField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  MessageDetailField? _fromId;
  MessageDetailField get fromId {
    return _fromId = _setField(_fromId, 'fromId', DbType.integer);
  }

  MessageDetailField? _toId;
  MessageDetailField get toId {
    return _toId = _setField(_toId, 'toId', DbType.integer);
  }

  MessageDetailField? _msgType;
  MessageDetailField get msgType {
    return _msgType = _setField(_msgType, 'msgType', DbType.text);
  }

  MessageDetailField? _msgBody;
  MessageDetailField get msgBody {
    return _msgBody = _setField(_msgBody, 'msgBody', DbType.text);
  }

  MessageDetailField? _status;
  MessageDetailField get status {
    return _status = _setField(_status, 'status', DbType.integer);
  }

  MessageDetailField? _createUser;
  MessageDetailField get createUser {
    return _createUser = _setField(_createUser, 'createUser', DbType.integer);
  }

  MessageDetailField? _updateUser;
  MessageDetailField get updateUser {
    return _updateUser = _setField(_updateUser, 'updateUser', DbType.integer);
  }

  MessageDetailField? _version;
  MessageDetailField get version {
    return _version = _setField(_version, 'version', DbType.integer);
  }

  MessageDetailField? _createTime;
  MessageDetailField get createTime {
    return _createTime = _setField(_createTime, 'createTime', DbType.datetime);
  }

  MessageDetailField? _updateTime;
  MessageDetailField get updateTime {
    return _updateTime = _setField(_updateTime, 'updateTime', DbType.datetime);
  }

  MessageDetailField? _isRead;
  MessageDetailField get isRead {
    return _isRead = _setField(_isRead, 'isRead', DbType.bool);
  }

  /// Deletes List<MessageDetail> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnMessageDetail!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnMessageDetail!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'seqId IN (SELECT seqId from messageDetail ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnMessageDetail!.updateBatch(qparams, values);
  }

  /// This method always returns [MessageDetail] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MessageDetail?
  @override
  Future<MessageDetail?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnMessageDetail!.toList(qparams);
    final data = await objFuture;
    MessageDetail? obj;
    if (data.isNotEmpty) {
      obj = MessageDetail.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [MessageDetail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MessageDetail?
  @override
  Future<MessageDetail> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        MessageDetail();
  }

  /// This method returns int. [MessageDetail]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? messagedetailCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final messagedetailsFuture = await _mnMessageDetail!.toList(qparams);
    final int count = messagedetailsFuture[0]['CNT'] as int;
    if (messagedetailCount != null) {
      messagedetailCount(count);
    }
    return count;
  }

  /// This method returns List<MessageDetail> [MessageDetail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<MessageDetail>
  @override
  Future<List<MessageDetail>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<MessageDetail> messagedetailsData =
        await MessageDetail.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return messagedetailsData;
  }

  /// This method returns Json String [MessageDetail]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [MessageDetail]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [MessageDetail]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnMessageDetail!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [MessageDetail]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `seqId` FROM messageDetail WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> seqIdData = <int>[];
    qparams.selectColumns = ['seqId'];
    final seqIdFuture = await _mnMessageDetail!.toList(qparams);

    final int count = seqIdFuture.length;
    for (int i = 0; i < count; i++) {
      seqIdData.add(seqIdFuture[i]['seqId'] as int);
    }
    return seqIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [MessageDetail]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnMessageDetail!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await MessageDetail.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnMessageDetail!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MessageDetailFilterBuilder

// region MessageDetailFields
class MessageDetailFields {
  static TableField? _fSeqId;
  static TableField get seqId {
    return _fSeqId =
        _fSeqId ?? SqlSyntax.setField(_fSeqId, 'seqid', DbType.integer);
  }

  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fFromId;
  static TableField get fromId {
    return _fFromId =
        _fFromId ?? SqlSyntax.setField(_fFromId, 'fromId', DbType.integer);
  }

  static TableField? _fToId;
  static TableField get toId {
    return _fToId =
        _fToId ?? SqlSyntax.setField(_fToId, 'toId', DbType.integer);
  }

  static TableField? _fMsgType;
  static TableField get msgType {
    return _fMsgType =
        _fMsgType ?? SqlSyntax.setField(_fMsgType, 'msgType', DbType.text);
  }

  static TableField? _fMsgBody;
  static TableField get msgBody {
    return _fMsgBody =
        _fMsgBody ?? SqlSyntax.setField(_fMsgBody, 'msgBody', DbType.text);
  }

  static TableField? _fStatus;
  static TableField get status {
    return _fStatus =
        _fStatus ?? SqlSyntax.setField(_fStatus, 'status', DbType.integer);
  }

  static TableField? _fCreateUser;
  static TableField get createUser {
    return _fCreateUser = _fCreateUser ??
        SqlSyntax.setField(_fCreateUser, 'createUser', DbType.integer);
  }

  static TableField? _fUpdateUser;
  static TableField get updateUser {
    return _fUpdateUser = _fUpdateUser ??
        SqlSyntax.setField(_fUpdateUser, 'updateUser', DbType.integer);
  }

  static TableField? _fVersion;
  static TableField get version {
    return _fVersion =
        _fVersion ?? SqlSyntax.setField(_fVersion, 'version', DbType.integer);
  }

  static TableField? _fCreateTime;
  static TableField get createTime {
    return _fCreateTime = _fCreateTime ??
        SqlSyntax.setField(_fCreateTime, 'createTime', DbType.datetime);
  }

  static TableField? _fUpdateTime;
  static TableField get updateTime {
    return _fUpdateTime = _fUpdateTime ??
        SqlSyntax.setField(_fUpdateTime, 'updateTime', DbType.datetime);
  }

  static TableField? _fIsRead;
  static TableField get isRead {
    return _fIsRead =
        _fIsRead ?? SqlSyntax.setField(_fIsRead, 'isRead', DbType.bool);
  }
}
// endregion MessageDetailFields

//region MessageDetailManager
class MessageDetailManager extends SqfEntityProvider {
  MessageDetailManager()
      : super(Orginone(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'messageDetail';
  static const List<String> _primaryKeyList = ['seqId'];
  static const String _whereStr = 'seqId=?';
}

//endregion MessageDetailManager
class OrginoneSequenceManager extends SqfEntityProvider {
  OrginoneSequenceManager() : super(Orginone());
}
// END OF ENTITIES
